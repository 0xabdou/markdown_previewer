{"version":3,"sources":["Header.tsx","display-context.ts","input-context.ts","Editor.tsx","Previewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","props","className","icon","faFreeCodeCamp","title","faExpandArrowsAlt","onClick","DisplayContext","createContext","display","toggleDisplay","currentDisplay","InputContext","input","setInput","newInput","Editor","displayContextValue","useContext","inputContextValue","editorClassName","outputClassName","id","onChange","e","target","value","marked","setOptions","breaks","Previewer","markup","__html","dangerouslySetInnerHTML","App","useState","setDisplay","useEffect","fetch","then","res","text","stuff","appHeight","doc","document","documentElement","height","window","innerHeight","console","log","style","setProperty","addEventListener","Provider","d","name","content","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8UA0BeA,MAhBf,SAAgBC,GACd,OAEE,sBAAKC,UAAU,SAAf,UACE,cAAC,IAAD,CAAiBA,UAAU,cAAcC,KAAMC,MAC/C,sBAAMF,UAAU,eAAhB,SAAgCD,EAAMI,QACtC,qBAAKH,UAAW,WAChB,cAAC,IAAD,CACEA,UAAU,wBACVC,KAAMG,IACNC,QAASN,EAAMM,cCNPC,EALOC,wBAAkC,CACvDC,QAAS,OACTC,cAAe,SAACC,OCCHC,EALMJ,wBAAgC,CACnDK,MAAM,GACNC,SAAU,SAAAC,GAAQ,OAAI,QC6BTC,MA/Bf,WACE,IAAMC,EAAsBC,qBAAWX,GACjCY,EAAoBD,qBAAWN,GAU/BH,EAAUQ,EAAoBR,QAChCW,EAAkB,GAClBC,EAAkB,GACN,WAAZZ,GACFW,EAAkB,cAClBC,EAAkB,aACG,cAAZZ,IACTW,EAAkB,UAGpB,IAAMP,EAAQM,EAAkBN,MAChC,OACE,sBAAKS,GAAG,SAASrB,UAAWmB,EAA5B,UACE,cAAC,EAAD,CAAQhB,MAAM,SAASE,QArBX,WACdW,EAAoBP,cAAc,aAqBhC,0BAAUY,GAAG,SAASC,SAlBT,SAACC,GAChBL,EAAkBL,SAASU,EAAEC,OAAOC,QAiBQA,MAAOb,EAAOZ,UAAWoB,Q,wBC1BzEM,IAAOC,WAAW,CAChBC,QAAQ,IA8BKC,MA3Bf,WACE,IAAMb,EAAsBC,qBAAWX,GACjCY,EAAoBD,qBAAWN,GAM/BH,EAAUQ,EAAoBR,QAChCR,EAAY,GACA,cAAZQ,EACFR,EAAY,cACS,WAAZQ,IACTR,EAAY,UAGd,IACM8B,EAAS,CAACC,OADEL,IAAOR,EAAkBN,QAG3C,OACE,sBAAKS,GAAG,YAAYrB,UAAWA,EAA/B,UACE,cAAC,EAAD,CAAQG,MAAM,YAAYE,QAjBd,WACdW,EAAoBP,cAAc,gBAiBhC,qBAAKY,GAAG,UAAUW,wBAAyBF,QCelCG,MAxCf,WAAgB,IAAD,EACiBC,mBAAkB,QADnC,mBACN1B,EADM,KACG2B,EADH,OAEaD,mBAAS,IAFtB,mBAENtB,EAFM,KAECC,EAFD,KASbuB,qBAAU,WACRC,MAAM,cACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAI3B,EAAS2B,MACzBC,MACC,IAEH,IAAMA,EAAQ,WACZ,IAAMC,EAAY,WAChB,IAAMC,EAAMC,SAASC,gBACfC,EAASC,OAAOC,YACtBC,QAAQC,IAAR,oBAAyBJ,IACzBH,EAAIQ,MAAMC,YAAY,eAAtB,UAAyCN,EAAzC,QAEFC,OAAOM,iBAAiB,SAAUX,GAClCA,KAGF,OACE,cAAC,EAAeY,SAAhB,CAAyB7B,MAAO,CAACjB,UAASC,cAxBtB,SAAC8C,GACFpB,EAAf3B,IAAY+C,EAAc,OACdA,KAsBhB,SACE,cAAC,EAAaD,SAAd,CAAuB7B,MAAO,CAACb,QAAOC,YAAtC,SACE,sBAAKb,UAAU,MAAf,UACE,sBAAMwD,KAAK,WAAWC,QAAQ,yCAC9B,cAAC,EAAD,IACA,cAAC,EAAD,YC3BKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASyB,eAAe,SAM1BX,M","file":"static/js/main.79f4037d.chunk.js","sourcesContent":["import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faFreeCodeCamp} from \"@fortawesome/free-brands-svg-icons\";\nimport {faExpandArrowsAlt} from \"@fortawesome/free-solid-svg-icons\";\nimport './Header.scss';\n\ntype HeaderProps = {\n  title: string;\n  onClick: () => void;\n};\n\nfunction Header(props: HeaderProps) {\n  return (\n\n    <div className='header'>\n      <FontAwesomeIcon className='header-icon' icon={faFreeCodeCamp}/>\n      <span className='header-title'>{props.title}</span>\n      <div className={'spacer'}/>\n      <FontAwesomeIcon\n        className='header-icon clickable'\n        icon={faExpandArrowsAlt}\n        onClick={props.onClick}\n      />\n    </div>\n  );\n}\n\nexport default Header;","import {createContext} from \"react\";\n\nexport type Display = 'both' | 'editor' | 'previewer';\n\ntype DisplayContextType = {\n  display: Display,\n  toggleDisplay: (currentDisplay: Display) => void,\n}\n\nconst DisplayContext = createContext<DisplayContextType>({\n  display: 'both',\n  toggleDisplay: (currentDisplay: Display) => {},\n});\n\nexport default  DisplayContext;\n","import {createContext} from \"react\";\n\ntype InputContextType = {\n  input: string,\n  setInput: (newInput: string) => void,\n}\n\nconst InputContext = createContext<InputContextType>({\n  input:'',\n  setInput: newInput => null,\n});\n\nexport default InputContext;","import './Editor.scss';\nimport Header from \"./Header\";\nimport {ChangeEvent, useContext} from \"react\";\nimport DisplayContext from \"./display-context\";\nimport InputContext from \"./input-context\";\n\n\nfunction Editor() {\n  const displayContextValue = useContext(DisplayContext);\n  const inputContextValue = useContext(InputContext);\n\n  const onClick = () => {\n    displayContextValue.toggleDisplay('editor');\n  };\n\n  const onChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    inputContextValue.setInput(e.target.value);\n  };\n\n  const display = displayContextValue.display;\n  let editorClassName = '';\n  let outputClassName = '';\n  if (display === 'editor') {\n    editorClassName = 'full-screen';\n    outputClassName = 'no-resize';\n  } else if (display === 'previewer') {\n    editorClassName = 'hidden';\n  }\n\n  const input = inputContextValue.input;\n  return (\n    <div id='Editor' className={editorClassName}>\n      <Header title='Editor' onClick={onClick}/>\n      <textarea id='editor' onChange={onChange} value={input} className={outputClassName}/>\n    </div>\n  );\n}\n\nexport default Editor;","import Header from \"./Header\";\nimport './Previewer.scss';\nimport {useContext} from \"react\";\nimport DisplayContext from \"./display-context\";\nimport InputContext from \"./input-context\";\nimport marked from 'marked';\n\nmarked.setOptions({\n  breaks: true,\n});\n\nfunction Previewer() {\n  const displayContextValue = useContext(DisplayContext);\n  const inputContextValue = useContext(InputContext);\n\n  const onClick = () => {\n    displayContextValue.toggleDisplay('previewer');\n  };\n\n  const display = displayContextValue.display;\n  let className = '';\n  if (display === 'previewer') {\n    className = 'full-screen';\n  } else if (display === 'editor') {\n    className = 'hidden';\n  }\n\n  const rawMarkup = marked(inputContextValue.input);\n  const markup = {__html: rawMarkup};\n\n  return (\n    <div id=\"Previewer\" className={className}>\n      <Header title='Previewer' onClick={onClick}/>\n      <div id=\"preview\" dangerouslySetInnerHTML={markup}/>\n    </div>\n  );\n}\n\nexport default Previewer;","import './App.scss';\nimport Editor from \"./Editor\";\nimport Previewer from \"./Previewer\";\nimport {useEffect, useState} from \"react\";\nimport DisplayContext, {Display} from \"./display-context\";\nimport InputContext from \"./input-context\";\n\n\nfunction App() {\n  const [display, setDisplay] = useState<Display>('both');\n  const [input, setInput] = useState('');\n\n  const toggleDisplay = (d: Display) => {\n    if (display === d) setDisplay('both');\n    else setDisplay(d);\n  };\n\n  useEffect(() => {\n    fetch('default.md')\n      .then(res => res.text())\n      .then(text => setInput(text));\n    stuff();\n  }, []);\n\n  const stuff = () => {\n    const appHeight = () => {\n      const doc = document.documentElement;\n      const height = window.innerHeight;\n      console.log(`height is ${height}`);\n      doc.style.setProperty('--app-height', `${height}px`);\n    };\n    window.addEventListener('resize', appHeight);\n    appHeight();\n  };\n\n  return (\n    <DisplayContext.Provider value={{display, toggleDisplay}}>\n      <InputContext.Provider value={{input, setInput}}>\n        <div className=\"App\">\n          <meta name=\"viewport\" content=\"width=device-width, user-scalable=no\"/>\n          <Editor/>\n          <Previewer/>\n        </div>\n      </InputContext.Provider>\n    </DisplayContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}